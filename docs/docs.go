// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/connect": {
            "get": {
                "description": "Возвращает текущий пул активных Fanuc подключений.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connection"
                ],
                "summary": "Получить список подключений",
                "responses": {
                    "200": {
                        "description": "Список активных подключений",
                        "schema": {
                            "$ref": "#/definitions/models.GetConnectionsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Создает новое подключение к станку по его IP-адресу и порту.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connection"
                ],
                "summary": "Создать подключение",
                "parameters": [
                    {
                        "description": "Данные для подключения (e.g., '192.168.1.10:8193')",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ConnectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное создание подключения",
                        "schema": {
                            "$ref": "#/definitions/models.CreateConnectionResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера или станок недоступен",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет подключение из пула, останавливает опрос и удаляет запись из БД.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connection"
                ],
                "summary": "Удалить подключение",
                "parameters": [
                    {
                        "description": "ID сессии для удаления",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Сообщение об успешном удалении",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Подключение не найдено",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/connect/check": {
            "post": {
                "description": "Проверяет доступность эндпоинта, связанного с указанным SessionID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connection"
                ],
                "summary": "Проверить состояние подключения",
                "parameters": [
                    {
                        "description": "ID сессии для проверки",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Статус 'healthy' или 'unhealthy'",
                        "schema": {
                            "$ref": "#/definitions/models.CheckConnectionResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Подключение не найдено",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/polling/start": {
            "post": {
                "description": "Запускает периодический сбор данных для подключения по SessionID с заданным интервалом.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Polling"
                ],
                "summary": "Запустить опрос",
                "parameters": [
                    {
                        "description": "Параметры для запуска опроса",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PollingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Сообщение об успешном запуске",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Сессия не найдена",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/polling/stop": {
            "post": {
                "description": "Останавливает сбор данных для подключения по SessionID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Polling"
                ],
                "summary": "Остановить опрос",
                "parameters": [
                    {
                        "description": "ID сессии для остановки опроса",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Сообщение об успешной остановке",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CheckConnectionResponse": {
            "type": "object",
            "properties": {
                "connection_info": {
                    "$ref": "#/definitions/models.ConnectionInfo"
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                }
            }
        },
        "models.ConnectionInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "is_healthy": {
                    "type": "boolean"
                },
                "last_used": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "use_count": {
                    "type": "integer"
                }
            }
        },
        "models.ConnectionRequest": {
            "type": "object",
            "required": [
                "endpoint_url"
            ],
            "properties": {
                "endpoint_url": {
                    "description": "\"192.168.1.10:8193\"",
                    "type": "string"
                }
            }
        },
        "models.CreateConnectionResponse": {
            "type": "object",
            "properties": {
                "connection_info": {
                    "$ref": "#/definitions/models.ConnectionInfo"
                },
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "integer",
                            "example": 404
                        },
                        "message": {
                            "type": "string",
                            "example": "Подключение не найдено"
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "models.GetConnectionsResponse": {
            "type": "object",
            "properties": {
                "connections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ConnectionInfo"
                    }
                },
                "pool_size": {
                    "type": "integer",
                    "example": 2
                },
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "models.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Polling started successfully"
                },
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "models.PollingRequest": {
            "type": "object",
            "required": [
                "interval",
                "session_id"
            ],
            "properties": {
                "interval": {
                    "description": "в миллисекундах",
                    "type": "integer"
                },
                "session_id": {
                    "type": "string"
                }
            }
        },
        "models.SessionRequest": {
            "type": "object",
            "required": [
                "session_id"
            ],
            "properties": {
                "session_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Fanuc Service API",
	Description:      "API для работы со станками Fanuc по протоколу FOCAS2 и отправки данных в Kafka.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
