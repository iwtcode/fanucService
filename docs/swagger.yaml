basePath: /api/v1
definitions:
  models.CheckConnectionResponse:
    properties:
      connection_info:
        $ref: '#/definitions/models.ConnectionInfo'
      status:
        example: healthy
        type: string
    type: object
  models.ConnectionInfo:
    properties:
      created_at:
        type: string
      endpoint:
        type: string
      is_healthy:
        type: boolean
      last_used:
        type: string
      session_id:
        type: string
      use_count:
        type: integer
    type: object
  models.ConnectionRequest:
    properties:
      endpoint_url:
        description: '"192.168.1.10:8193"'
        type: string
    required:
    - endpoint_url
    type: object
  models.CreateConnectionResponse:
    properties:
      connection_info:
        $ref: '#/definitions/models.ConnectionInfo'
      status:
        example: ok
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        properties:
          code:
            example: 404
            type: integer
          message:
            example: Подключение не найдено
            type: string
        type: object
      status:
        example: error
        type: string
    type: object
  models.GetConnectionsResponse:
    properties:
      connections:
        items:
          $ref: '#/definitions/models.ConnectionInfo'
        type: array
      pool_size:
        example: 2
        type: integer
      status:
        example: ok
        type: string
    type: object
  models.MessageResponse:
    properties:
      message:
        example: Polling started successfully
        type: string
      status:
        example: ok
        type: string
    type: object
  models.PollingRequest:
    properties:
      interval:
        description: в миллисекундах
        type: integer
      session_id:
        type: string
    required:
    - interval
    - session_id
    type: object
  models.SessionRequest:
    properties:
      session_id:
        type: string
    required:
    - session_id
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для работы со станками Fanuc по протоколу FOCAS2 и отправки данных
    в Kafka.
  title: Fanuc Service API
  version: 1.0.0
paths:
  /connect:
    delete:
      consumes:
      - application/json
      description: Удаляет подключение из пула, останавливает опрос и удаляет запись
        из БД.
      parameters:
      - description: ID сессии для удаления
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Сообщение об успешном удалении
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Подключение не найдено
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Удалить подключение
      tags:
      - Connection
    get:
      description: Возвращает текущий пул активных Fanuc подключений.
      produces:
      - application/json
      responses:
        "200":
          description: Список активных подключений
          schema:
            $ref: '#/definitions/models.GetConnectionsResponse'
      summary: Получить список подключений
      tags:
      - Connection
    post:
      consumes:
      - application/json
      description: Создает новое подключение к станку по его IP-адресу и порту.
      parameters:
      - description: Данные для подключения (e.g., '192.168.1.10:8193')
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ConnectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное создание подключения
          schema:
            $ref: '#/definitions/models.CreateConnectionResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера или станок недоступен
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Создать подключение
      tags:
      - Connection
  /connect/check:
    post:
      consumes:
      - application/json
      description: Проверяет доступность эндпоинта, связанного с указанным SessionID.
      parameters:
      - description: ID сессии для проверки
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Статус 'healthy' или 'unhealthy'
          schema:
            $ref: '#/definitions/models.CheckConnectionResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Подключение не найдено
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Проверить состояние подключения
      tags:
      - Connection
  /polling/start:
    post:
      consumes:
      - application/json
      description: Запускает периодический сбор данных для подключения по SessionID
        с заданным интервалом.
      parameters:
      - description: Параметры для запуска опроса
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.PollingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Сообщение об успешном запуске
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Сессия не найдена
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Запустить опрос
      tags:
      - Polling
  /polling/stop:
    post:
      consumes:
      - application/json
      description: Останавливает сбор данных для подключения по SessionID.
      parameters:
      - description: ID сессии для остановки опроса
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Сообщение об успешной остановке
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Неверный формат запроса
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Остановить опрос
      tags:
      - Polling
swagger: "2.0"
